{
  
    
        "post0": {
            "title": "Title",
            "content": ". Covid-19 predictor using posteroanterior (PA) chest X-ray images. . The X-ray dataset is taken from - https://github.com/ieee8023/covid-chestxray-dataset. . I have been running this code on Google Colab environment using a GPU as a hardware accelerator. Since the notebook is using Resnet50 for transfer learning you will need a machine with an NVIDIA GPU otherwise the training might take ages . The folder structure I am using here to store the images is - Covid/ -| covid_positive -| covid_negative -| metadata.csv (This can be downloaded from the open source database) . Fast AI makes it extremely simple if you make a folder for each of your class and put all the respective images in that folder . Disclaimer: This notebook by no means is an accurate model to predict covid-19 or make any kind of diagnosis whatsoever. This is an ongoing experiment being done using opensource databases just as a POC. The model is not suitable for deployment.* . from fastai.vision import * from fastai.widgets import * import pandas as pd . Mount Google Drive with path to folders containing images. You need to change this path to point to the folder which contains the x-ray images . drive_path = &#39;drive/My Drive/FastAI/Covid/&#39; . df = pd.read_csv(drive_path+&#39;metadata.csv&#39;) . covid_positive = df[&#39;finding&#39;] == &#39;COVID-19&#39; . xrays = df[&#39;modality&#39;] == &#39;X-ray&#39; CT = df[&#39;modality&#39;] == &#39;CT&#39; PA = df[&#39;view&#39;] == &#39;PA&#39; AP = df[&#39;view&#39;] == &#39;AP&#39; . I have cloned the image repository to my local machine. Since I am running this notebook on Colab I have to run a script on my local machine to upload the covid_postive and covid_negative images to my google drive. . PA_covid and PA_non_covid gives me the list of file names which are then uploaded to google drive . PA_covid = df[covid_positive &amp; PA ] PA_non_covid = df[PA &amp; ~covid_positive] . #List files belonging to both the classes covid_images = [files for files in PA_covid[&#39;filename&#39;]] non_covid_images = [files for files in PA_non_covid[&#39;filename&#39;]] . path = Path(drive_path) . classes = [&#39;covid_positive&#39;, &#39;covid_negative&#39;] . #sanity check images for c in classes: verify_images(path/c) . #Split data into train and validation sets data = ImageDataBunch.from_folder(path, train=&quot;.&quot;, test=&#39;test&#39;, valid_pct=0.25, ds_tfms=get_transforms(), bs=8, size=512, num_workers=4).normalize(imagenet_stats) . #View data data.show_batch(rows=3, figsize=(7,8)) . data.classes, data.c, len(data.train_ds), len(data.valid_ds), len(data.test_ds) . ([&#39;covid_negative&#39;, &#39;covid_positive&#39;], 2, 159, 39, 30) . Training . We are using a Resnet50 for transfer learning. Using fit one cycle for a few epochs and then using fastai&#39;s lrfinder to find an optimal range for our learning rate. . We use precision and recall to measure the incidents of false positives and false negatives. . precision=Precision() recall=Recall() AUC=AUROC() . learn = cnn_learner(data, models.resnet50, metrics=(accuracy, precision, recall, AUC)) . learn.fit_one_cycle(1) . epoch train_loss valid_loss accuracy precision recall auroc time . 0 | 1.356049 | 1.467854 | 0.632653 | 0.642857 | 0.409091 | 0.816498 | 00:14 | . learn.fit_one_cycle(3) learn.recorder.plot_losses() . epoch train_loss valid_loss accuracy precision recall auroc time . 0 | 0.780940 | 0.582251 | 0.775510 | 0.789474 | 0.681818 | 0.917508 | 00:14 | . 1 | 0.930111 | 1.348126 | 0.673469 | 0.800000 | 0.363636 | 0.771044 | 00:14 | . 2 | 0.696235 | 0.713986 | 0.795918 | 0.875000 | 0.636364 | 0.883838 | 00:15 | . learn.save(&#39;stage-1&#39;) . learn.lr_find() learn.recorder.plot() . &lt;progress value=&#39;4&#39; class=&#39;&#39; max=&#39;6&#39;, style=&#39;width:300px; height:20px; vertical-align: middle;&#39;&gt;&lt;/progress&gt; 66.67% [4/6 00:45&lt;00:22] epoch train_loss valid_loss accuracy precision recall auroc time . 0 | 0.396417 | #na# | 00:11 | . 1 | 0.603173 | #na# | 00:11 | . 2 | 0.485660 | #na# | 00:11 | . 3 | 0.475031 | #na# | 00:11 | . &lt;progress value=&#39;8&#39; class=&#39;&#39; max=&#39;18&#39;, style=&#39;width:300px; height:20px; vertical-align: middle;&#39;&gt;&lt;/progress&gt; 44.44% [8/18 00:06&lt;00:08 0.8336] &lt;/div&gt; &lt;/div&gt; LR Finder is complete, type {learner_name}.recorder.plot() to see the graph. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; learn.unfreeze() . learn.fit_one_cycle(5, max_lr=slice(1e-6,3e-6)) learn.recorder.plot_losses() . epoch train_loss valid_loss accuracy precision recall auroc time . 0 | 0.366462 | 0.797330 | 0.795918 | 0.875000 | 0.636364 | 0.883838 | 00:15 | . 1 | 0.415618 | 0.675390 | 0.775510 | 0.823529 | 0.636364 | 0.885522 | 00:14 | . 2 | 0.346195 | 0.851609 | 0.714286 | 0.900000 | 0.409091 | 0.882155 | 00:15 | . 3 | 0.389726 | 0.791412 | 0.775510 | 0.923077 | 0.545455 | 0.888889 | 00:15 | . 4 | 0.353896 | 0.615626 | 0.755102 | 0.750000 | 0.681818 | 0.893939 | 00:15 | . learn.lr_find() learn.recorder.plot() . &lt;progress value=&#39;3&#39; class=&#39;&#39; max=&#39;6&#39;, style=&#39;width:300px; height:20px; vertical-align: middle;&#39;&gt;&lt;/progress&gt; 50.00% [3/6 00:35&lt;00:35] epoch train_loss valid_loss accuracy precision recall auroc time . 0 | 0.429253 | #na# | 00:12 | . 1 | 0.397398 | #na# | 00:11 | . 2 | 0.525626 | #na# | 00:11 | . &lt;progress value=&#39;15&#39; class=&#39;&#39; max=&#39;18&#39;, style=&#39;width:300px; height:20px; vertical-align: middle;&#39;&gt;&lt;/progress&gt; 83.33% [15/18 00:09&lt;00:01 0.7310] &lt;/div&gt; &lt;/div&gt; LR Finder is complete, type {learner_name}.recorder.plot() to see the graph. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; learn.fit_one_cycle(10, max_lr=slice(5e-6,2e-5)) . epoch train_loss valid_loss accuracy precision recall auroc time . 0 | 0.339669 | 0.670465 | 0.795918 | 0.875000 | 0.636364 | 0.892256 | 00:15 | . 1 | 0.321450 | 0.623675 | 0.795918 | 0.875000 | 0.636364 | 0.909091 | 00:15 | . 2 | 0.240033 | 0.544205 | 0.775510 | 0.866667 | 0.590909 | 0.909091 | 00:14 | . 3 | 0.267077 | 0.527792 | 0.816327 | 0.882353 | 0.681818 | 0.917508 | 00:15 | . 4 | 0.276160 | 0.577976 | 0.795918 | 0.875000 | 0.636364 | 0.925926 | 00:14 | . 5 | 0.308620 | 0.470521 | 0.816327 | 0.882353 | 0.681818 | 0.930976 | 00:14 | . 6 | 0.304911 | 0.457852 | 0.795918 | 0.833333 | 0.681818 | 0.927609 | 00:15 | . 7 | 0.279543 | 0.532609 | 0.836735 | 0.937500 | 0.681818 | 0.924242 | 00:14 | . 8 | 0.303569 | 0.448968 | 0.816327 | 0.782609 | 0.818182 | 0.919192 | 00:14 | . 9 | 0.290932 | 0.543839 | 0.816327 | 0.882353 | 0.681818 | 0.927609 | 00:15 | . learn.recorder.plot_losses() . learn.lr_find() learn.recorder.plot() . &lt;progress value=&#39;2&#39; class=&#39;&#39; max=&#39;6&#39;, style=&#39;width:300px; height:20px; vertical-align: middle;&#39;&gt;&lt;/progress&gt; 33.33% [2/6 00:23&lt;00:47] epoch train_loss valid_loss accuracy precision recall auroc time . 0 | 0.234567 | #na# | 00:12 | . 1 | 0.169403 | #na# | 00:11 | . &lt;progress value=&#39;15&#39; class=&#39;&#39; max=&#39;18&#39;, style=&#39;width:300px; height:20px; vertical-align: middle;&#39;&gt;&lt;/progress&gt; 83.33% [15/18 00:09&lt;00:01 0.3063] &lt;/div&gt; &lt;/div&gt; LR Finder is complete, type {learner_name}.recorder.plot() to see the graph. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; learn.fit_one_cycle(20, max_lr=slice(8e-5,1e-4)) . epoch train_loss valid_loss accuracy precision recall auroc time . 0 | 0.322076 | 0.495412 | 0.816327 | 0.842105 | 0.727273 | 0.927609 | 00:15 | . 1 | 0.279912 | 0.484062 | 0.836735 | 0.850000 | 0.772727 | 0.909091 | 00:14 | . 2 | 0.291005 | 0.453530 | 0.857143 | 0.826087 | 0.863636 | 0.920875 | 00:14 | . 3 | 0.297301 | 0.892714 | 0.734694 | 0.909091 | 0.454545 | 0.930976 | 00:14 | . 4 | 0.343548 | 0.436237 | 0.836735 | 0.818182 | 0.818182 | 0.936027 | 00:14 | . 5 | 0.370696 | 0.633898 | 0.877551 | 0.807692 | 0.954545 | 0.929293 | 00:14 | . 6 | 0.373300 | 0.322910 | 0.897959 | 0.814815 | 1.000000 | 0.949495 | 00:14 | . 7 | 0.332509 | 0.604464 | 0.775510 | 1.000000 | 0.500000 | 0.983165 | 00:14 | . 8 | 0.315743 | 0.240321 | 0.877551 | 0.900000 | 0.818182 | 0.966330 | 00:14 | . 9 | 0.369731 | 0.365187 | 0.877551 | 0.944444 | 0.772727 | 0.947811 | 00:14 | . 10 | 0.289559 | 0.609716 | 0.857143 | 0.894737 | 0.772727 | 0.941077 | 00:14 | . 11 | 0.268234 | 0.454224 | 0.857143 | 1.000000 | 0.681818 | 0.986532 | 00:14 | . 12 | 0.247017 | 0.470392 | 0.857143 | 0.894737 | 0.772727 | 0.954545 | 00:14 | . 13 | 0.209558 | 0.471399 | 0.857143 | 0.857143 | 0.818182 | 0.937710 | 00:14 | . 14 | 0.220764 | 0.279114 | 0.897959 | 0.947368 | 0.818182 | 0.973064 | 00:14 | . 15 | 0.226320 | 0.302877 | 0.836735 | 0.937500 | 0.681818 | 0.981481 | 00:14 | . 16 | 0.198550 | 0.212525 | 0.897959 | 0.947368 | 0.818182 | 0.983165 | 00:14 | . 17 | 0.200037 | 0.242637 | 0.877551 | 0.944444 | 0.772727 | 0.979798 | 00:14 | . 18 | 0.185797 | 0.329568 | 0.857143 | 1.000000 | 0.681818 | 0.983165 | 00:14 | . 19 | 0.204054 | 0.510584 | 0.857143 | 1.000000 | 0.681818 | 0.981481 | 00:14 | . learn.save(&#39;stage-2&#39;) . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(4) . preds, y, losses = learn.get_preds(ds_type=DatasetType.Test, with_loss=True) . &lt;/div&gt; .",
            "url": "https://prateekkarkare.github.io/fastpages/2020/04/08/covid_predictor.html",
            "relUrl": "/2020/04/08/covid_predictor.html",
            "date": " • Apr 8, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://prateekkarkare.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://prateekkarkare.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}